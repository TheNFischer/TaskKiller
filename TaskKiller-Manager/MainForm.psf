<File version="3.1">
  <FileID>45bde3d6-35ab-45cd-936b-33c25b5621e0</FileID>
  <Preview>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
PIgCAACAB1EAAADwIAoAAAAeRAEAAMCDKAAAAHgQBQAAAA+iAAAA4EEUAAAAPIgCAACAB1EAAADw
IAoAAAAeRAEAAMCDKAAAAHgQBQAAAA+iAAAA4EEUAAAAPIgCAACAB1EAAADwIAoAAAAeRAEAAMCD
KAAAAHgQBQAAAA+iAAAA4EEUAAAAPIgCAACAB1EAAADwIAoAAAAeRAEAAMCDKAAAAHgQBQAAAA+i
AAAA4EEUAAAAPIgCAACAB1EAAADwIAoAAAAeRAEAAMCDKAAAAHgQBQAAAA+iAAAA4EEUAAAAPIgC
AACAB1EAAADwIAoAAAAeRAEAAMCDKAAAAHgQBQAAAA+iAAAA4EEUAAAAPIgCAACAB1EAAADwIAoA
AAAeRAEAAMCDKAAAAHgQBQAAAA+iAAAA4EEUAAAAPIgCAACAB1EAAADwIAoAAAAeRAEAAMCDKAAA
AHgQBQAAAA+iAAAA4EEUAAAAPIgCAACAB1EAAADwIAoAAAAeRAEAAMCDKAAAAHgQBQAAAA+iAAAA
4EEUAAAAPIgCAACAB1EAAADwIAoAAAAeRAEAAMCDKAAAAHgQBQAAAA+iAAAA4EEUAAAAPIgCAACA
B1EAAADwIAoAAAAeRAEAAMCDKAAAAHgQBQAAAA+iAAAA4EEUAAAAPIgCAACAB1EAAADwIAoAAAAe
RAEAAMCDKAAAAHgQBQAAAA+iAAAA4EEUAAAAPIgCAACAB1EAAADwIAoAAAAeRAEAAMCDKAAAAHgQ
BQAAAA+iAAAA4EEUAAAAPIgCAACAB1EAAADwIAoAAAAeRAEAAMCDKAAAAHgQBQAAAA+iAAAA4EEU
AAAAPIgCAACAB1EAAADwIAoAAAAeRAEAAMCDKAAAAHgQBQAAAA+iAAAA4EEUAAAAPIgCAACAB1EA
AADwIAoAAAAeRAEAAMCDKAAAAHgQBQAAAA+iAAAA4EEUAAAAPIgCAACAB1EAAADwIAoAAAAeRAEA
AMCDKAAAAHgQBQAAAA+iAAAA4EEUAAAAPIgCAACAB1EAAADwIAoAAAAeRAEAAMCDKAAAAHgQBQAA
AA+iAAAA4EEUAAAAPIgCAACAB1EAAADwIAoAAAAeRAEAAMCDKAAAAHgQBQAAAA+iAAAA4EEUAAAA
PIgCAACAB1EAAADwIAoAAAAeRAEAAMCDKAAAAHgQBQAAAA+iAAAA4EEUAAAAPIgCAACAB1EAAADw
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
MQlKTCiVf2RAFQln9c67szVn8WolpprB/fFczZ+/Q7kt1To3d52WLFio9z54X5fT6zQ22Kukszv1
7pw5WrJ+r+p6+1UUEWMuq1zdfQ2KPhKryvJsbXAuY4tSq2uUFRyljFwzCHobdP7ITqWUtmlwoE/X
8qI07z1zvXM+1MX0Smewuh2Hr/I4CkC3ud46U1iuXElWz+iwks/v1LazlxR3Ok7FNZVKNA8OxXWV
ij8aqaK6a+rpNQOtIV/rndtohlVpq3x1mfp44XvmtszRqZQsZZyNUW5Zi9pL47Xg/XfN5+fqck6D
2gqiNOed2Zq76IAqO32qyziv2R9tVl5lrSKObHSO6/JdZ3X1apNObFyg2fOWauue48ouqfna2/F4
XgRoBmC3T31ddTq1a4XmvPeeFq7frZJrA+rrKFDQrxdp8cp5em/RKuXW92u8u06HtyzXbLPfm8+E
KTcmVQlXitQ9dE1xh8NVWHPN2e+uzmYlXQpWTrU5fmYf7H21KjNVkefS1T4ypM6yZC2ZN1uzZ7+r
0MxGtZuytO65BVq4+n0tMAWzou26Rq4VKegTc0zMde2NSFB2SIJSUivUN9Snothjmv3JNvM9TFRc
WIH6+5p0LGiFczyDjocoPuyoPjDFeOuBWDX5etTtcrtnUACeXZO3b6stJ1hvPf+cFq9Zr5OR8Tq+
e7l+P3eNNr73slZu3a3snCRtXTVXL364XfmmjO9d9rze25OswfFJ3flsSin7N+lYRL4++2xIh5e/
o83mcWH/J0u1aMN27Tl52Syi6nRi2yzlDt1S7s79OrQvR7fu+nRuzQq9/dEG7TSLojLzsxh8fIcW
vf6Gll+J16WP9igsvknXB0q147VDyq+MM4P1nHonJu+/UPHbsK/2nxpu0cG5H+hd8/g9Z80nqh6c
Uk9WmN57+R3N+/BtbbqcqNHBGm1YeUh15mciYs0yvfreR3p76XxltAzqekOWlvzhbc2f966WHzmn
gbFO7TGPBVlN3co5uEV/MAvBNxfNVmhpi6b8tdr05ruau/B9zdtmX1twQ1PjP66fm6euAFj2lfz+
/j7n1fb21fdDZrXq7/er174/3f5NAOd96uajfeW02cb+DfOu3j7nhS0jw8MasO8C6OpW36BfnfYV
/OY89lXePX6f8+rWdudV/f3mQc7st3kgtn83f2jY/Nucf3SyQXtf/kTBCXWaujOlPru9fYV//5Bz
MEeGB50H0unLNLfRvjLeXI99Rff0ZQzLZ267s3/2lfP2VdyDQ/L1dN7bT79zPfZ4+Z1X1rsfg69i
j+33LQDT7x/3yW+Oif23vX327y34B+zKtfve+/+7zW3rM6en9729s/v+bbT73mlf3X/vuvtMoei1
5+22b+Mzt/H6g9tovzfTx3pAXR3men0DGjXH3f49B/u+e7vdsClHdlAP2Mu3K4GhAef4fd3fFHhc
BaDDvofe3L6Bwen9GRkaNOXNp7amdK36xVoV+oY1NXZdvd0dznGw7wqw29lj5tyv/KbItdn7wvTx
mr7MTvn6+9Vrj589bW5Ll7nMvv5es227Ou07UZzjNOrc3vq8CK14fpsa7Auzrg+pu9Psk/lZsD/A
9roGnL+DMX2/m74PDzqv8LffQ3+fLZLm+M3sl73/mfu4/fewuX/a4867ALxpdGxcI/3tykmMVMil
i0osrNZgd6uSw0IUlZClFl+r6kpzdCkkTPllHbpza0oNZbmKSClS//VxjY+PqaelWa2dvZowP1fd
TY0qq+tWf3e1Qi9fUkhMilp7+tVhFk++kTH5rrWo5VqP86K88f6rigy9rEvhMapvblZqXKhCw9PV
MzxiLueaeQwZMD/vfl2tMguKvi41NLRp2D4Ou9yOb2Jyckr+tgqFhoQou9Gv2zcmdXNyWMWZ0QqJ
TFPXyE3zc+xXQ/1V9Y9MatTfpDCzf4nlbc6Lf6emxlVXkqKQkBg1+id1Y3JQTQ1N6u4f042RTsWG
X1ZEbp3Gp25qcmpS7fX5CrkcqrL2Ed2aGjM/O+779aQ8lQXgyekyD7DXlHo2StlF9WaV/OO8DY+l
ADwjHl8B+CL7Sv72lipFH41WVWu7Gcjf9W8CfD37zNe12iJdOZ5gft7sswfu2/1QKADPMPv9NKvj
23c/1aeffmqG4pQZzmZlb/59985tTZpV/qQZaPZrt25OOENs6uZtfXp7+u1y9rR9D/yEKQLO+/dN
Qb1hBuW4fTW/Oc+n5jLGx0ZNOZh+3/2Y+dmbnDSlw17v+NT0NnfvOO8CuHXH7sMdTZjtx80AnXBW
zGOavDlp5sf3exeANb2v07fltrksuw8j5vJv3r5r9uG2uV6zjTk9/TcRzICcmN6/O85bEe22o7px
64753F1nNT8yMuoMeucZCXMM79rbcsseF7OtuS77tw/s+W9O/PiGv0UB+Jbse9F9ZjX6Y/0rgxYF
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
kwkDv+1cAAAAAElFTkSuQmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[
$MainForm_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme $MainForm -Theme Dark
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $MainForm -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $MainForm -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]'Segoe UI, 9pt'
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]'32, 32, 32'
		$ContainerColor = [System.Drawing.Color]'45, 45, 45'
		$BackColor = [System.Drawing.Color]'32, 32, 32'
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies 'System.Windows.Forms', 'System.Drawing' -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}

function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
		
		if ($Title)
		{
			$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}


function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart

	.DESCRIPTION
		Use the function to remove contents from the chart control

	.PARAMETER  ChartControl
		The Chart Control to clear

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
	$ComboBox.ValueMember = $ValueMember
}

function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}


function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}

#endregion

$btnOpenProp_Click= {
	#TODO: Place custom script here
	if ($selectedProcess -ne 1)
	{
		Show-ChildForm_psf -selectedProcess $selectedProcess
	}
	else
	{
		$lblDebug.Text = "No Process selected"
	}
}

$btnRefresh_Click={
	#TODO: Place custom script here
	Get-Process | ForEach-Object -Process {
		$row = $processTable.NewRow();
		$row["ID"] = $_.Id;
		$row["ProcessName"] = $_.ProcessName;
		$row["CPU"] = $_.CPU;
		$row["Responding"] = $_.Responding;
		$processTable.Rows.Add($row);
	}
	$processTable.AcceptChanges();
	$grdProcess.DataSource = $processTable;
	$lblRefreshDate.Text = (Get-Date -Format "HH:mm:ss")
	$lblDebug.Text = ""
}

$btnKillUnresponsive_Click={
	#TODO: Place custom script here
	Get-Process | Where-Object {$_.Responding -eq $false} | Stop-Process
}

$btnKill_Click={
	#TODO: Place custom script here
	if ((($selectedProcess -ne 1) -xor ($selectedProcess -ne 4))-xor ($selectedProcess -ne 0))
	{
		Stop-Process -Id $selectedProcess -Force
	}
	else
	{
		$lblDebug.Text = "No valid Process selected"
	}
}

$btnCloseManager_Click={
	#TODO: Place custom script here
	
}

$grdProcess_CellClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	Set-Variable -Name selectedProcess -Scope script -Value $grdProcess.SelectedRows[0].Cells["ID"].Value.ToString()
	$lblDebug.Text = ""
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>