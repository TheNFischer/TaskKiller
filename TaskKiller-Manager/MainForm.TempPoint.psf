<File version="3.1">
  <FileID>45bde3d6-35ab-45cd-936b-33c25b5621e0</FileID>
  <Preview>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
OihB69bv1ImT582e+WnH0WNndPDgca3ddNA5OM8erDe9jF2+pLFHl00BsHvasRnFKq7rMrPEDNZ6
s4NrlDUPKSnvmlat26lTpy4477R3/nyg49TpAK1au1NxWdVmHg7fW8aqMIUgs7hOaUZEWqViTAGw
c8k5Zsw5TqDL+TXzGlNMjh49pb2mYKzcdEirN+zT2XMXze3YoeMXY5wiYX/VbG+3Xbag1tzu0man
AFS0DtzbNsVmZ7514NZ3KwD2zwh2DFw3A2vAGVTTKtuGlWFWePXa9Wbgb9Ibz7+m2HCzh3wxQMuW
LtF/+bufa8GnaxSWmK3qjtF7y1W0mZUsLlRMSpmyS8sVZvaGQ8xy9s0PsoqKFWqGYnhigdno1YpN
LFa22VsPj0lVSn6RohOLVNIxpkyzpx2Rlq+ktCwlFzco1X4saVBKSqaSS9tVUFaskDBzuZHJSiqu
VVJiunOwYUXr4N31GDDfhCnOaVNQyhqbFBObrpyGQRUUFSkqtUzlXf1KTjLLljQpOSVZIfZXBOFJ
Sq9pMe0xXWlVplFVmcaWWKicilqFh5vrNMUgMq3M3DHMgI8yp2MSFRQYbgpIu/MsRkhopFmvJCXa
9TKXnVL24HoBAH4o+9huD9q+aIZfqdnrzanqMkNxij0g3Q74ixGZOnk53pSBxHtOBiaYWVRtlu12
Bu/0Mnb5sqZ+BUXlOs8IxGeVqtQUCzt0S5sGppj/29MxmRU6F5bi/Jph2rnQFEWll987z71ljCqz
M51dWq8MI8rsIMZlVDi3we7RT/HJ+QM+ebU6E5ykC1fSnAPX7emTgfG6HJWlHFNQ7LMJduhPL2d3
NHPKWnQpItdcx5BzmVapuR3tQ3e+RwEYvO7sxU8PTcsZWvZj25DOBkXqUnCYMtPTTCM5rwXLVun8
lXiFJ+c6V2jPe29Z00QeugzTquxBEbahlDWZgeps1KmvOecxl1/W1OtcztTyQ6Z8mOXM56Yv52GD
5ut2GXtZ9tcPd5f7zgbNdU9dh10n53NmXSpazF66uSNNrduD559i17PcXKf9FYO9jfYy7PmKa2oU
FhKplMpuVXeO/ID1AgB8F3ZH0w7OS6YA1LQPmxlzf+CWNNodv0HzeDyumq6Jr6hoG3HO8+CQtqft
m+cERefJ/mrAPitcZR7fazonzA7u2H3mMht6b6pp4I6a+h9gTjf03TLnH3/4/EZ9zw3lVTYrs6zB
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
AADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUA
AAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAA
ADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA
8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADA
gygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAP
ogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyI
AgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAK
AAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygA
AAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAA
AOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAA
gAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAA
HkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4
EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBB
FAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdR
AAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQB
AADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUA
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</Preview>
  <Form>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
flz+4x8KA4DDx7sBAA==</Form>
  <Code><![CDATA[
$MainForm_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme $MainForm -Theme Dark
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $MainForm -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $MainForm -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]'Segoe UI, 9pt'
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]'32, 32, 32'
		$ContainerColor = [System.Drawing.Color]'45, 45, 45'
		$BackColor = [System.Drawing.Color]'32, 32, 32'
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies 'System.Windows.Forms', 'System.Drawing' -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}

function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
		
		if ($Title)
		{
			$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}


function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart

	.DESCRIPTION
		Use the function to remove contents from the chart control

	.PARAMETER  ChartControl
		The Chart Control to clear

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
	$ComboBox.ValueMember = $ValueMember
}

function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}


function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}

#endregion

$btnOpenProp_Click={
	#TODO: Place custom script here
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>