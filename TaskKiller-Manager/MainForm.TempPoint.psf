<File version="3.1">
  <FileID>45bde3d6-35ab-45cd-936b-33c25b5621e0</FileID>
  <Preview>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
OihB69bv1ImT582e+WnH0WNndPDgca3ddNA5OM8erDe9jF2+pLFHl00BsHvasRnFKq7rMrPEDNZ6
s4NrlDUPKSnvmlat26lTpy4477R3/nyg49TpAK1au1NxWdVmHg7fW8aqMIUgs7hOaUZEWqViTAGw
c8k5Zsw5TqDL+TXzGlNMjh49pb2mYKzcdEirN+zT2XMXze3YoeMXY5wiYX/VbG+3Xbag1tzu0man
AFS0DtzbNsVmZ7514NZ3KwD2zwh2DFw3A2vAGVTTKtuGlWFWePXa9Wbgb9Ibz7+m2HCzh3wxQMuW
LtF/+bufa8GnaxSWmK3qjtF7y1W0mZUsLlRMSpmyS8sVZvaGQ8xy9s0PsoqKFWqGYnhigdno1YpN
LFa22VsPj0lVSn6RohOLVNIxpkyzpx2Rlq+ktCwlFzco1X4saVBKSqaSS9tVUFaskDBzuZHJSiqu
VVJiunOwYUXr4N31GDDfhCnOaVNQyhqbFBObrpyGQRUUFSkqtUzlXf1KTjLLljQpOSVZIfZXBOFJ
Sq9pMe0xXWlVplFVmcaWWKicilqFh5vrNMUgMq3M3DHMgI8yp2MSFRQYbgpIu/MsRkhopFmvJCXa
9TKXnVL24HoBAH4o+9huD9q+aIZfqdnrzanqMkNxij0g3Q74ixGZOnk53pSBxHtOBiaYWVRtlu12
Bu/0Mnb5sqZ+BUXlOs8IxGeVqtQUCzt0S5sGppj/29MxmRU6F5bi/Jph2rnQFEWll987z71ljCqz
M51dWq8MI8rsIMZlVDi3we7RT/HJ+QM+ebU6E5ykC1fSnAPX7emTgfG6HJWlHFNQ7LMJduhPL2d3
NHPKWnQpItdcx5BzmVapuR3tQ3e+RwEYvO7sxU8PTcsZWvZj25DOBkXqUnCYMtPTTCM5rwXLVun8
lXiFJ+c6V2jPe29Z00QeugzTquxBEbahlDWZgeps1KmvOecxl1/W1OtcztTyQ6Z8mOXM56Yv52GD
5ut2GXtZ9tcPd5f7zgbNdU9dh10n53NmXSpazF66uSNNrduD559i17PcXKf9FYO9jfYy7PmKa2oU
FhKplMpuVXeO/ID1AgB8F3ZH0w7OS6YA1LQPmxlzf+CWNNodv0HzeDyumq6Jr6hoG3HO8+CQtqft
m+cERefJ/mrAPitcZR7fazonzA7u2H3mMht6b6pp4I6a+h9gTjf03TLnH3/4/EZ9zw3lVTYrs6zB
KQCJ2dXm86MPXL8d2gPOTndt16RZx3Fnp9WuZ63PXL9Zh/ulYmrA2/+Xtww5B0BejMgx1zt8b9vY
ud0+/D0KQOfgTVWajWgH65dVmc+3Dn+hpIJas+KlOh8SrRTz/6b+W6ozK1dlVtptuWl2eWvq9NT/
q+59/e7nna8/eDn2PA9+7ssfv3q505//Zm7nu38Z33aZ01+337zy+mbFxscrODTaeUagzHzOrvO3
XQYA4Iexj7F2ENqD9tIL65VT3ursDT8ye4BdaZMpFDnOnnVqYa1yKxpVYXboyhu7f5DK5qlXAeTX
tCu5sFGhMQXKLbevMmtR9gO+fPrb2MuISavQlcQSUxzG7m0bu7PaOfrFdy8AXYO3VNUxcm94fYUZ
ZNe6J+8OfNNKOk2zaTfnf2DgecnUbTcb2j5rYZumbXoe3h4A4G81Zqcrt6pLIXFFjtD44kdmlw+O
LVRmaasz3yrMHrgtAUl5lUrOq/pBknIrlVXWZObEiDMn4rJrFRxT6Loe34dd5/DkcpU1DTjbYnq7
2B3qrlF9jwIwdEvVnaNTK+gUgRHnIMCvMldirsh+dP+6l0xtC7bHT4gpp4CX2KeJvcs+Gzumuu6J
x6baDn/7zK15PLFP9z8O078WsOtsv2f2KX636/5ezM64/Wh/RWDXdWpb3J3fhm/sOxaAhQsXFflM
AagxN9y2CPv0dnP3qDr7RtTR+wP0jT4xnV7WP/ZEdT1JA+Oe5XuSBieeqG4vG5p8YnqetOHrntX7
oJHr5vtxXbVmJ356hnebAnDqzPnvXwCqzN6sr39E46PDGh15dGOjI0/M+NioZ02Mjz1RkxPjT8yN
yQnPunl98omZfp31k3L71k3PunP71hPz+Z3bT9QXn9955ukLw/Xzn9+nz3X79h2nANjh/4MLQJfZ
+7dDfHj40Y2MjDwx9m8WeJX9mw1P0vj4+BMzMTHhWZOTk0/M9evXn6gbN2541s2bN5+YW7duPVH2
remfdbduuX/e5ovPP9edO3f0uSkEN27epgBMcxuMXuE2lP3JbTD7i9tg9Aq3wewvbkPZn9wGo1e4
DWZ/cRvK/uQ2GJ9md+wzG2aYT5+22RJSo7KmQTvuH/q8Pfh8ePyGOf/nFIAvcxuMXuE2lP3JbTD7
i9tg9Aq3wewvbkPZn9wGo1e4DWZ/cRvK/jQ9EJ8VE9dv6vqNW86wt0/rXzen392Tq9j8NnPaDn77
eSmprEerAqo0OHaTAuDGbTB6hdtQ9ie3wewvboPRK9wGs7+4DWV/chuMXuE2mP3FbSj7k9sQfVrZ
QV7dNqyNQTVq9o0orXpI/21Xlf73j7L0f8/N0eaILlW2DiujqkerL1Zq8ubUcQD8CsCF22D0Creh
7E9ug9lf3AajV7gNZn9xG8r+5DYYvcJtMPuL21D2J7dB+jSze/gZFV16YVO+/nz7oH5zQXo1QHrF
fPzFyS/0H1fXaEtwpYbGbzrntcOfAuDCbTB6hdtQ9ie3wewvboPRK9wGs7+4DWV/chuMXuE2mP3F
bSj7k9sQfZrZBOb06D9sGdBrl6Tfnp/y+mXpr/cM6Z1DlfrN1mz1DV/XF19QAL6W22D0Creh7E9u
g9lf3AajV7gNZn9xG8r+5DYYvcJtMPuL21D2J7ch+jT63Axxm97hMf3mUId+Y/b6p4e/LQL/3+5+
fXCkTD9bmazn/vqC1l2qcs5vl6MAuHAbjF7hNpT9yW0w+4vbYPQKt8HsL25D2Z/cBqNXuA1mf3Eb
yv7kNkyfNnZ4D41d18nEFi08nK//dX6Z3gq6P/z/8+5BzT1RqV+sTtVzf3fJKQB/uyKdAvBN3Aaj
V7gNZX9yG8z+4jYYvcJtMPuL21D2J7fB6BVug9lf3IayP7kN1KeNHd7DpgCcS2nVkmMF9wrA9J7/
glOVeml9up77r2b4vxCs5/6GAvCt3AajV7gNZX9yG8z+4jYYvcJtMPuL21D2J7fB6BVug9lf3Iay
P7kN1KfR9K8A+obH9OrhDr1yd89/zvEK/XJt2tTwf94M/+eD9NzfX9bm4Brn/BwD8DXcBqNXuA1l
f3IbzP7iNhi9wm0w+4vbUPYnt8HoFW6D2V/chrI/uQ3Tp5lNSH6f/u2KZs07Va0Xp4e/3fN/0fjb
i/onb0VobJJXAXwjt8HoFW5D2Z/cBrO/uA1Gr3AbzP7iNpT9yW0weoXbYPYXt6HsT25D9Glmk1Ta
pbnHivWflyfrub8yA9zs8T/3D8bfBOifvBKmtMpeM/DvD38KgAu3wegVbkPZn9wGs7+4DUavcBvM
/uI2lP3JbTB6hdtg9he3oexPbkP0aWUTV+zThsvVau+bUGRBh/5iSbL+9e8j9a/NXv+KM+VmNo84
57PnpwB8A7fB6BVuQ9mf3Aazv7gNRq/48lD2J7eh7E9ug9Er3Aazv7gNZX/68hB9Wtk/6pNS3q2V
Fyo0fn36rYCnBv2NG7ccD37OogB8A7fB6BVuQ9mf3Aazv7gNRq9wG8z+4jaU/cltMHqF22D2F7eh
7E/Tw/BpZ4d4dduQ83JA+/a+05+/9+eADfvnj7+8DAXga7gNRq9wG8r+5DaY/cVtMHqF22D2F7eh
7E9ug9Er3Aazv7gNZX96cAg+zexAd/bw7w5/t/N82dQfAZryhVnu5s07FIBpboMR/uFWCvzFrRR4
hVsp8Be3UgD/cCtE/uJWSPzJrZR4xYNF6PbtW5q8fvOnVQAAAMCPa8QYGBpWrZnfdoZTAAAA8AAK
AAAAHkQBAADAgygAAAB4kN8LgD3S3u1oYAAA8PjZues6jw2/PwPQ0tKi2tpa1dXVAQCAH4Gds3be
us1hy68FwL7+s6KiQn/6p3+q559/Xr/4xS8AAMCPwM5ZO2/t3LXz98sz2a8FwL4BQ3Z2tn7+858r
NjZWoaGhAADgR2DnrJ23du7a+fvlmez3ApCbm6tf/epXioyMVFBQEAAA+BHYOWvnrZ27FAAAADyC
AgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAK
AAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygA
AAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAA
AOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAA
gAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAA
HkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4
EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBB
FAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdR
AAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQB
AADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUA
AAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAA
ADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA
8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADA
gygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAP
ogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyI
AgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAK
AAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygA
AAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAA
AOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAA
gAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAA
HkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4
EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBB
FAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdR
AAAA8CAKAAAAHkQBAADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQB
AADAgygAAAB4EAUAAAAPogAAAOBBFAAAADyIAgAAgAdRAAAA8CAKAAAAHkQBAADAgygAAAB4EAUA
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</Preview>
  <Form>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</Form>
  <Code><![CDATA[
$MainForm_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme $MainForm -Theme Dark
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $MainForm -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $MainForm -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]'Segoe UI, 9pt'
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]'32, 32, 32'
		$ContainerColor = [System.Drawing.Color]'45, 45, 45'
		$BackColor = [System.Drawing.Color]'32, 32, 32'
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies 'System.Windows.Forms', 'System.Drawing' -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}

function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
		
		if ($Title)
		{
			$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}


function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart

	.DESCRIPTION
		Use the function to remove contents from the chart control

	.PARAMETER  ChartControl
		The Chart Control to clear

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
	$ComboBox.ValueMember = $ValueMember
}

function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}


function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}

#endregion

$btnOpenProp_Click={
	#TODO: Place custom script here
	
}

$btnRefresh_Click={
	#TODO: Place custom script here
	Get-Process | ForEach-Object -Process {
		$row = $processTable.NewRow();
		$row["ID"] = $_.Id;
		$row["ProcessName"] = $_.ProcessName;
		$row["CPU"] = $_.CPU;
		$row["Responding"] = $_.Responding;
		$processTable.Rows.Add($row);
	}
	$processTable.AcceptChanges();
	$grdProcess.DataSource = $processTable;
}

$btnKillUnresponsive_Click={
	#TODO: Place custom script here
	
}

$btnKill_Click={
	#TODO: Place custom script here
	
}

$btnCloseManager_Click={
	#TODO: Place custom script here
	
}

$btnCloseAll_Click={
	#TODO: Place custom script here
	
}

$grdProcess_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$grdProcess_CellClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>