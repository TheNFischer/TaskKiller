<File version="3.1">
  <FileID>45bde3d6-35ab-45cd-936b-33c25b5621e0</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAACe7SURBVHhe7d1ZcJ33ed9xJrLH9pV70WTi3jTt
tFN3xo2dXsQ36TjtxB7X8aR2kiZxvcVNnMYk5bi1bMuWvMmSLYmrbO0UdxIg9n1fD3YcLAc7DvZ9
5waCm7g9ff4vFoLQ3xQp0S8EPd/fzEcEgXc9gPD83vccgNsIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYSElIJt234r/r73vTf+qU9+Mr5jxw61
M75ju/4JAADe2XRm71Rf/cpX4v/igx+MP/TQQ3Gd7c7d89B73jP24Q9/WLZv3yknkjOkPT4h/WNn
JD66AAAA3uH6VP/YgtRE2+SJJ56Uj3/84/KBD3xAVsb8r8973/ve+PbtO6Q62iUN8RmpaB2S8tZB
AACwhVR3jEv7wLTs2bNffud3/uWbF4BPffJP40dPpkm0T4d/y6BU6kYAAMDW4mZ4bdeE1DT3yN99
9atvXgD06j/e0T8pkfYRicSGAADAFlXWMiDDsxdlz559b14AHn744fjIzHmpbBuRqrZhAACwRbmn
AobnluSZZ3a9eQHYuXNnfHjqnFS1j0p1+wgAAJumtnNU6rsnpKHnwXLbdNte20/XmHe5t6u+e1xq
Om7vp65r3Lvc2+W2u7qP9Spjw8EdgHsrADt2xkemz0l1x1hw0G+mtvPelgMA4H64+VLePCAphU1y
Kr9Rkh4Qty23zQrdtttHnQ7/wroe77Jvx6m8RskobZXqNldkxqRWzym7sj14v2/5t8ptL6+q0zuP
I7rvkblL91cAajrHlw/Yo7F3Sv/UVqNv12hRqO+e1AYyGezMtzwAAPejTq+cy5sH5WhqpSTl1Epq
fr2k5D0YblundJtH0yJSpQOyoKZLjqaU68fq3rDs25WQEZHEnLpgRqZq6TieVuld7u1w53MstSIo
G/U97s7G7cfR3c0fnb+vAnA+eOWgu6WwnttYbPiMpBbrzpKzpK2jS3Z+6xFJzotIfk2HtI+eC04y
+ORtWBcAgHvV2Dsp+dXdcuhUmcT6p6Te3aLvfjDcttw2X0ssldKmfr2CbpC0/AZpHZjWj42/Ydmm
+JTEhua8Wgfn9Fgnfs3x6bm0D8nLx4ukQc/n1YRSKa/v0e3pRfO65epXlm3un9FtzktMtxnV5Rt1
mLvtu/e1DMwEy7j9BMuv7M+93dw3JQWRNjmYVCFNfdN3PI7ubv7o/OX7KwB1ngLQMjAnBxJz5Ytf
+ZpUlJdJW1tMGhsb5NDBg/LUrv1yODlXdzYalICN69a553DisxLtu83dSXAP9huWXVHfM71hGbeN
aT1pd2z6du9M8PGGXn2f7rO+Z2p5eXdHQpdzz71s3Ob9mZDGuNvHnedT36370eNfPo71ywMAHoSg
ANR065VtZTAMS6P9UtY88EC4bUV1aB9NqZAyLQDuNnpmcbPud0w/duey5S2DemXdJPteTZG9ryYH
f67a+0qyvHgsRwrruoPl1q+3qrZ9WA7o4HcF4GBSuVQ0xqWydSjY75qVZU9kR2TPS0ny3GtpWn46
pbghLs8fyZTdLyXKkVQtK9E+KW8a1NKiywfr6rkodxejqKZTDqdG3n4BGJ1Z1OGmgzQYqre1jZyT
J5/dL2UlxTI9PS3Dw8MyPj4uU1OTsnj+nPzyuf3y1J4XpKlfh+O69dyAru8YkIKiAknJKpL03GJJ
y8qXjPKY1HbpMF237KpGbUhVja1S6J7XCAa8DvqeISkpb5Sy1jEtEPoFUVkjedVtUhapl4L6Pqlu
7ZTCSLtUdw5IcXlUKjtcg3rjtu+NKxNDUlhaJXk18ZVisVw66mNdklcckZIWLTvu/d71AQBvVVSv
at3z8sfTItKiQ80NzUhs+IFw23LbdOXCDVT3eoCskuagdFS2rltWB6v78yc/f16OHE2SlNQcSU3L
XXMqKVP27ntF9msxcHNubb1169frRfFriWV60Tgth5IrpVKHeJV7cV7ws/pDger2UUkricqPntgr
KSnZcuhwovzgp7+Ux596QZ5/8bAkJ2fJz57aL8cyKqS2c0IqWoakIvg5f/1T1eqQL67tkqNpVdI8
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
AAyiAAAAYBAFAAAAgygAAAAYRAEAAMAgCgAAAAZRAAAAMIgCAACAQRQAAAAMogAAAGAQBQAAAIMo
AAAAGEQBAADAIAoAAAAGUQAAADCIAgAAgEEUAAAADKIAAABgEAUAAACDKAAAABhEAQAAwCAKAAAA
BlEAAAAwiAIAAIBBFAAAAAyiAAAAYBAFAAAAgygAAAAYRAEAAMAgCgAAAAZRAAAAMIgCAACAQRQA
AAAMogAAAGAQBQAAAIMoAAAAGEQBAADAIAoAAAAGUQAAADCIAgAAgEEUAAAADKIAAABgEAUAAACD
KAAAABhEAQAAwCAKAAAABlEAAAAwiAIAAIBBFAAAAAyiAAAAYBAFAAAAgygAAAAYRAEAAMAgCgAA
AAZRAAAAMIgCAACAQRQAAAAMogAAAGAQBQAAAIMoAAAAGEQBAADAIAoAAAAGUQAAADCIAgAAgEEU
AAAADKIAAABgEAUAAACDKAAAABhEAQAAwCAKAAAABlEAAAAwiAIAAIBBFAAAAAyiAAAAYBAFAAAA
gygAAAAYRAEAAMAgCgAAAAZRAAAAMIgCAACAQRQAAAAMogAAAGAQBQAAAIMoAAAAGEQBAADAIAoA
AAAGUQAAADCIAgAAgEEUAAAADKIAAABgEAUAAACDKAAAABhEAQAAwCAKAAAABlEAAAAwiAIAAIBB
FAAAAAyiAAAAYBAFAAAAgygAAAAYRAEAAMAgCgAAAAZRAAAAMIgCAACAQRQAAAAMogAAAGAQBQAA
AIMoAAAAGEQBAADAIAoAAAAGUQAAADCIAgAAgEEUAAAADKIAAABgEAUAAACDKAAAABhEAQAAwCAK
AAAABlEAAAAwiAIAAIBBFAAAAAyiAAAAYBAFAAAAgygAAAAYRAEAAMAgCgAAAAZRAAAAMIgCAACA
QRQAAAAMogAAAGAQBQAAAIMoAAAAGEQBAADAIAoAAAAGUQAAADCIAgAAgEEUAAAADKIAAABgEAUA
AACDKAAAABhEAQAAwCAKAAAABlEAAAAwiAIAAIBBFAAAAAyiAAAAYBAFAAAAgygAAAAYRAEAAMAg
CgAAAAZRAAAAMIgCAACAQRQAAAAMogAAAGAQBQAAAIMoAAAAGEQBAADAIAoAAAAGUQAAADCIAgAA
gEEUAAAADKIAAABgEAUAAACDKAAAABhEAQAAwCAKAAAABlEAAAAwiAIAAIBBFAAAAAyiAAAAYBAF
AAAAgygAAAAYRAEAAMAgCgAAAAZRAAAAMIgCAACAQRQAAAAMogAAAGAQBQAAAIMoAAAAGEQBAADA
IAoAAAAGUQAAADCIAgAAgEEUAAAADKIAAABgEAUAAACDKAAAABhEAQAAwCAKAAAABlEAAAAwiAIA
AIBBFAAAAAyiAAAAYBAFAAAAgygAAAAYRAEAAMAgCgAAAAZRAAAAMIgCAACAQRQAAAAMogAAAGAQ
BQAAAIMoAAAAGEQBAADAIAoAAAAGUQAAADCIAgAAgEEUAAAADKIAAABgEAUAAACDKAAAABhEAQAA
wCAKAAAABlEAAAAwiAIAAIBBFAAAAAyiAAAAYBAFAAAAgygAAAAYRAEAAMAgCgAAAAZRAAAAMIgC
AACAQRQAAAAMogAAAGAQBQAAAIMoAAAAGEQBAADAIAoAAAAGUQAAADCIAgAAgEEUAAAADKIAAABg
EAUAAACDKAAAABhEAQAAwCAKAAAABlEAAAAwiAIAAIBBFAAAAAyiAAAAYBAFAAAAgygAAAAYRAEA
AMAgCgAAAAZRAAAAMIgCAACAQRQAAAAMogAAAGAQBQAAAIMoAAAAGEQBAADAIAoAAAAGUQAAADCI
AgAAgEEUAAAADKIAAABgEAUAAACDKAAAABhEAQAAwCAKAAAABlEAAAAwiAIAAIBBFAAAAAyiAAAA
YBAFAAAAgygAAAAYRAEAAMAgCgAAAAZRAAAAMIgCAACAQRQAAAAMogAAAGAQBQAAAIMoAAAAGEQB
AADAIAoAAAAGUQAAADCIAgAAgEEUAAAADKIAAABgEAUAAACDKAAAABhEAQAAwCAKAAAABlEAAAAw
iAIAAIBBFAAAAAyiAAAAYBAFAAAAgygAAAAYRAEAAMAgCgAAAAZRAAAAMIgCAACAQRQAAAAMogAA
AGAQBQAAAIMoAAAAGEQBAADAIAoAAAAGUQAAADCIAgAAgEEUAAAADKIAAABgEAUAAACDKAAAABhE
AQAAwCAKAAAABlEAAAAwiAIAAIBBv7ECcF4LgNs4AAB45zmrHmgBcPp0g/3Tyv0JAADekdbP7gdS
AFybAAAA72x3zO4HUQAAAMDW8pYKQO/kxWBFAACwNXWPX5D5ey0AO3bsHLh4TUQ7QNAaAADA1jS/
JHJDRHbt3vfmBeCv//pv4s/u2iPPPLNLnn76WQAAsIXt3rNPvva1v3/zAkAIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh5P6zbdv/B2A5
jRONqvsSAAAAAElFTkSuQmCC</Preview>
  <Form>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
99qQ4Hs7D2BWC297EkyNT7eM8peB3rN3fIzfYf4W8S5vrzN/i3h4Ft5g/hbxqGreUvN+4nEvNeA1
HPoqsf8NQv4StRXeJxh4C2D6tfKJcHgW3mD+FvGoal5m3kc8JdwjHp6FN9U8ZuCne2yKt/2sV4l9
0KZfOP6Ctd0jGFcBBfMHvL1FbHAZa3uZ+VvEYz4Hyvg3KJvPdR+PmMfMe7gH6wWx137W5Z22XyD2
iTZ98/iL1ob+6r2c/V/j7XH5Uod8rcagfuEpZRNIPFjy28zjFgKYV9uBc5/wu07jlkhs+pe16f9W
bfjkP0/wr+ft/fJ39QuUcFQ1fuZx6zbM2PoksX5eoRW+SOwLbfq/Vds9gg/dZcEmolNO/ca8/bJ+
Ab83itk3iPXz+hcn5HevDe/0jX09fQT/9rx98ZpoYMFH3pXXiMU9qFNfaoUnj5/aAg688/cIZo7h
kNu6vxNvX9chlFjcP+uhnxVI7BNb7/5NCPnda7tHMNiicCjl7fP019a9wcT6v3VwfIhbfpbYL7TC
T23v1ya5LynFfQ2KD3H70+8h+L+rQx4TezuO6x1iv9gKP7W9X9sNgj/6UyS4Muv+7rqX6S9X1u3c
zMFlm9638ed9+PrxW7Tp/1Zt2HLy3f6U7hr2e+leSmz5WD6+Sqyf19+mFX5q++Ih6+7rjbjoLxD8
XbqX8hoOfZXY775vP7X9LrVRgm/N19P8qP9N3XttYW/7Wb4yfotnNMHv2Qo/tb1/yLfWGVGCcZ+K
X6l7qZW/3B3r4wqC+oUTsd0Xv+vv2wo/tX2lNglN13cQ/IzuvU/szfUybxF7+U2/7/ip7Xeq7R7B
/LIwHdAcJm/q3ueJ9fNKr+0rxAZ905/a/p61UeHIfYFgv+59h1g6HtL65d/0p7a/aW24EPsewZic
4IrglOgoghEOuSHduDLpRWKDFnX9pe7bT22/S21IMBvMWyVVY2myAo9YP683/ayniX14bW8fP7X9
D9WGaB3vEBxkYe+tl3mO2Keu7a3jp7b/sdruERxYvhx/o2PK+V9xbT+1/dT2uDYk2HqSYLe2rxH7
0rX91PZT25OHcVsTfPL69/imP7X9PWtDgqu3NcHf55v+1PZT209tP7X91PZT209tP7X91PZT209t
f/faiO9w9/b6ysG7bv51ba7zpAec6z/59ObVqfhm6ura4nj5StCbUtCbZ6e6tXlvS0Hnntf78aYU
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</Form>
  <Code><![CDATA[
$MainForm_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme $MainForm -Theme Dark
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $MainForm -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $MainForm -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]'Segoe UI, 9pt'
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]'32, 32, 32'
		$ContainerColor = [System.Drawing.Color]'45, 45, 45'
		$BackColor = [System.Drawing.Color]'32, 32, 32'
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies 'System.Windows.Forms', 'System.Drawing' -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
		
		if ($Title)
		{
			$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}


function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart

	.DESCRIPTION
		Use the function to remove contents from the chart control

	.PARAMETER  ChartControl
		The Chart Control to clear

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
	$ComboBox.ValueMember = $ValueMember
}

function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}


function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}

#endregion
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>